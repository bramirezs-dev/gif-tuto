{"version":3,"sources":["component/AddCategory.js","helpers/getGifs.js","component/GrifGirdItem.js","component/GifGrid.js","hooks/useFetchGIfs.js","component/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GrifGirdItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGIfs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACjBC,mBAAS,IADQ,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAS,MAIX,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAhBqB,SAACP,GAC1BF,EAASE,EAAEQ,OAAOF,aAqBtBZ,EAAYe,UAAY,CACtBd,c,OAAee,EAAUC,KAAKC,Y,mCC9BnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCEPO,EAAe,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACpC,OACE,sBAAKc,UAAU,OAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCgBKO,EAjBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdlB,mBAAS,CACjCyB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDX2BK,CAAa1B,GAAjCa,EADkB,EACxBN,KAAca,EADU,EACVA,QACtB,OACE,qCACE,6BAAKpB,IACJoB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SACE,6BACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,eEKpBgB,EAfM,WAAO,IAAD,EACW7C,mBAAS,CAAC,cADrB,mBAClB8C,EADkB,KACN/C,EADM,KAEzB,OACE,qCACE,8CADF,IACwB,uBACtB,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACG+C,EAAWnB,KAAI,SAACT,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCP/B6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.2735f9ae.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setValue] = useState(\"\");\r\n\r\n  const handleInputChanges = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChanges}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.prototype = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=UaNwjBmb2iGb69tmG6D8CLoZAzY5005v`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GrifGirdItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nimport { useFetchGIfs } from \"../hooks/useFetchGIfs\";\r\nimport { GrifGirdItem } from \"./GrifGirdItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGIfs(category);\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && <p>Cargando...</p>}\r\n      <div className=\"card-grid\">\r\n        <ol>\r\n          {images.map((img) => (\r\n            <GrifGirdItem key={img.id} {...img} />\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGIfs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setstate({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One piece\"]);\r\n  return (\r\n    <>\r\n      <h1>GifExpertApp</h1> <hr></hr>\r\n      <AddCategory setCategories={setCategories} />\r\n      <ol>\r\n        {categories.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./component/GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}